#+TITLE: Emacs configuration
#+AUTHOR: Carl Düvel
#+EMAIL: c.a.duevel@gmail.com 
#+BEGIN_QUOTE
If I have seen further it is by standing on the shoulders of Giants
Isaac Newton
#+END_QUOTE
* Package management
** Define package repositories(archives)

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")))
(when (not package-archive-contents)
  (package-refresh-contents))
#+END_SRC

** Bootstrap use-package
If =use-package= is not installed, install it.
By default all packages should be installed so we set =use-package-always-ensure=.
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package)
  (setq use-package-always-ensure t))
#+END_SRC 
The =:ensure-system-package= keyword allows you to ensure system binaries exist alongside your package declarations.
#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package)
#+END_SRC 

* Performance
** Garbage Collection
   
Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC
* Editing

** Evil mode
Vim emulation for emacs.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode 1))
#+END_SRC
*** Unbind M-. and M- in =evil-mode=
=M-.= and =M-,= are popular keybindings for "jump to definition" and
"back". =evil-mode= by default binds those to rather rarely used
functions =evil-repeat-pop-next= and =xref-pop-marker-stack=, for some reason.
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (define-key evil-normal-state-map (kbd "M-.") nil)
  (define-key evil-normal-state-map (kbd "M-,") nil))
#+END_SRC
*** Escape mode
Escape modes in evil with jk instead of Esc.
#+BEGIN_SRC emacs-lisp
(use-package evil-escape
  :config
  (setq-default evil-escape-key-sequence "jk")
  (setq-default evil-escape-delay 0.2)
  (evil-escape-mode))
#+END_SRC

*** Leader Mode Config
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "a" 'org-archive-subtree-default
    "b" 'evil-buffer
    "f" 'find-file
    "i" 'org-clock-in
    "k" 'kill-buffer
    "o" 'org-clock-out
    "q" 'evil-quit
    "w" 'basic-save-buffer))
#+END_SRC
** Spaces instead of tabs
[[https://www.emacswiki.org/emacs/TabsAreEvil][Tabs are evil!]]
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

** Auto-Save in =/tmp=

Store backups and auto-saved files in =TEMPORARY-FILE-DIRECTORY= (which
defaults to /tmp on Unix), instead of in the same directory as the
file.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Save Buffer on focus out
Give Emacs the nice IDEA feature of "auto-save on focus lost".
Pulled from [[https://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/][here.]]
#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+END_SRC
** Always follow symlinks
When opening a file, always follow symlinks.

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period
Don't assume that sentences should have two spaces after
periods.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Automatic Line Breaks
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

* =dired-mode=

Ability to use =a= to visit a new directory or file in =dired= instead
of using =RET=. =RET= works just fine, but it will create a new buffer
for /every/ interaction whereas =a= reuses the current buffer.

#+BEGIN_SRC emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Human readable units

#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-alh")
#+END_SRC
* UI

** Confirm before closing Emacs
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Ask =y/n= instead of =yes/no=
This is a favorable shorthand.
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Auto revert files on change
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Disable startup message

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
#+END_SRC

** Disable scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

** Disable menu bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

** Disable tool bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Remember the cursor position of files when reopening them

#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
#+END_SRC

** Put pointer to help window immideatly
#+BEGIN_SRC emacs-lisp
(setq help-window-select t)
#+END_SRC
** Remember the cursor position of files when reopening them

#+BEGIN_SRC emacs-lisp
(setq save-place-file "~/.emacs.d/saveplace")
(setq-default save-place t)
#+END_SRC

** Buffer handling
Kill all buffers but the current one.
#+BEGIN_SRC emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** Custom theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :config
  (load-theme 'zenburn t))
#+END_SRC

** Which Key
=which-key= displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (add-hook 'after-init-hook 'which-key-mode))
#+END_SRC

** Powerline 
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config (powerline-center-evil-theme))
#+END_SRC 
* Org-mode
Do not fetch another version than the one built in, as org-gcal does
not work with current org mode version.

#+BEGIN_SRC emacs-lisp
(use-package org
  :pin manual)
#+END_SRC
** Exports
Exports to markdown are useful.
#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC
** Display preferences

Show an outline of pretty bullets instead of a list of asterisks.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Show a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis "⤵")
#+END_SRC

When editing org-files with source-blocks, we want the source blocks to be themed as they would in their native mode.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC

** Key bindings 

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)
#+END_SRC

** GTD
#+BEGIN_SRC emacs-lisp
(require 'org)
(setq gtd-dir "~/Dropbox/org/gtd/")
(setq inbox-file (concat gtd-dir "inbox.org"))
(setq gtd-file (concat gtd-dir "gtd.org"))
(setq tickler-file (concat gtd-dir "tickler.org"))
(setq gcal-file (concat gtd-dir "gcal.org"))
(setq org-agenda-files (list
                        inbox-file
                        gtd-file
                        gcal-file
                        tickler-file))


(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "PROJECT" "AGENDA" "|" "MINUTES")
        (sequence "WAITING" "|" "PROGRESS")))


(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file)

(setq org-agenda-custom-commands 
      '(("h" "@home" tags-todo "@home")
        ("c" "@computer" tags-todo "@computer")
        ("H" "+hasi" tags-todo "+hasi")
        ("p" "@phone" tags-todo "@phone")
        ("b" "@BO" tags-todo "@BO")))                           

(add-hook 'org-mode-hook 'org-indent-mode)

#+END_SRC
Org Capture Templates are explained [[http://orgmode.org/manual/Capture-templates.html][here]] and Org Template expansion
[[http://orgmode.org/manual/Template-expansion.html#Template-expansion][here.]] There is also a  need to load org-protocol to get the
[[https://github.com/sprig/org-capture-extension][org-capture-extension]] going.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file  inbox-file)
(define-key global-map "\C-cc" 'org-capture)

(require 'org-protocol)


(setq org-capture-templates '(("a" "Appointment" entry (file gcal-file)
                               "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
                              ("t" "Todo [inbox]" entry
                               (file+headline  inbox-file "Tasks")"* TODO %i%?")
                              ("p" "Protocol" entry
                               (file+headline inbox-file "Inbox")
                               "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
                              ("L" "Protocol Link" entry
                               (file+headline inbox-file "Inbox")
                               "* %? [[%:link][%:description]] \nCaptured on: %U")
                              ("T" "Tickler" entry
                               (file+headline tickler-file "Tickler")
                               "* %i%? \n %U")))

#+END_SRC
Shortcut to get some overview of the work for today.
#+BEGIN_SRC emacs-lisp
(defun gtd()
  "Open main gtd file and start 'org-agenda' for today."
  (interactive)
  (find-file gtd-file)
  (org-agenda-list)
  (org-agenda-day-view)
  (shrink-window-if-larger-than-buffer)
  (other-window 1))
#+END_SRC

** org-gcal
#+BEGIN_SRC emacs-lisp
(require 'netrc)

(defun get-authinfo (host port)
  (let* ((netrc (netrc-parse (expand-file-name "~/.authinfo")))
         (hostentry (netrc-machine netrc host port port)))
    (when hostentry (netrc-get hostentry "password"))))

(use-package org-gcal
  :config
  (setq org-gcal-client-id "670360079766-1u8vf6j1r5qmkg98f2imeje3mogql24f.apps.googleusercontent.com"
        org-gcal-client-secret (get-authinfo "gcal.api" "9999")
        org-gcal-file-alist '(("c.a.duevel@gmail.com" .  "~/Dropbox/org/gtd/gcal.org"))))
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC
* Auto-completion
** ido completion engine
=ido= stands for /interactivly DO things/ so it means autocompletion
for many functions like find-file or switch-buffer.
#+BEGIN_SRC emacs-lisp
(ido-mode t)
(ido-everywhere t)
(setq ido-enable-flex-matching t)
#+END_SRC
** smex
=smex= does auto completion for the ~M-x~ shortcut to find a function.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package smex
  :init (smex-initialize)
  :bind ("M-x" . smex))
#+END_SRC

* Writing prose
** Spotting bad style in english texts
[[https://github.com/bnbeckwith/writegood-mode][writegood-mode]] is a minor mode that finds common style problems.
#+begin_src emacs-lisp
(use-package writegood-mode)
#+end_src
** Flyspell
Order corrections by likeliness, not by the default of alphabetical
ordering.
#+BEGIN_SRC emacs-lisp
(setq flyspell-sort-corrections nil)
#+END_SRC

Do not print messages for every word (when checking the entire
buffer). This is a major performance gain.
#+BEGIN_SRC emacs-lisp
(setq flyspell-issue-message-flag nil)
#+END_SRC

Switch between German and English dictionaries.
Those were installed with ~apt install ingerman iamerican-large~

#+BEGIN_SRC emacs-lisp
(defun flyspell-switch-dictionary()
  "Switch between German and English dictionaries"
  (interactive)
  (let* ((dic ispell-current-dictionary)
         (change (if (string= dic "deutsch") "english" "deutsch")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC

Switch on flyspell automatically in some major modes.
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

Skip source code in org mode documents.

#+BEGIN_SRC emacs-lisp
(add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))
#+END_SRC

** LaTeX
Auctex manual recommends these settings:
#+BEGIN_SRC emacs-lisp
(use-package tex
  :defer t
  :ensure auctex
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t))
#+END_SRC
** Thesaurus
A thesaurus is provided by the ~synosaurus~ package.
The default backend is wordnet, an offline English thesaurus.
We also install the popup library to have the options presented this
way.
#+BEGIN_SRC emacs-lisp
(use-package popup)
(use-package synosaurus
  :config 
  (setq synosaurus-choose-method 'popup))
#+END_SRC
The default keybinding of ~synosaurus~ clashes with org-mode.
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "t" 'synosaurus-choose-and-replace)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp 
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Programming
** Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode)
(use-package docker-compose-mode)
#+end_src
*** Highlight matching parenthesis
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

** Git

Magit is an interface to the version control system Git.

*** Configuration

Create shortcut for =Magit=.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC

**** Start the commit buffer in evil normal mode

#+BEGIN_SRC emacs-lisp
(add-hook 'with-editor-mode-hook 'evil-normal-state)
#+END_SRC

** Syntax checking
http://www.flycheck.org/

Enable global on the fly syntax checking through =flycheck=.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

** projectile
:LOGBOOK:
CLOCK: [2019-02-19 Di 13:24]
:END:
https://github.com/bbatsov/projectile
Projectile is a project interaction library.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap
  ("s-p" . projectile-command-map)
  :config
  (projectile-mode +1))
#+END_SRC

Use ag to search quickly.

#+begin_src emacs-lisp
(use-package ag
  :ensure-system-package ag)
#+end_src

** Set $MANPATH, $PATH and exec-path from shell even when started from GUI helpers like =dmenu= or =Spotlight=
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Auto completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :init (global-company-mode))
#+END_SRC

** Rainbow delimiters
Bring a little color to all those parentheses.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC 

** dumb jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind ("s-g" . dumb-jump-go))
#+END_SRC
** yasnippets
In order to save some typing snippets come in handy.
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :init
  (yas-global-mode 1)
  (setq yas-prompt-functions '(yas-ido-prompt)))
#+END_SRC
Yasnippet snippet is the official collection of snippets for
yasnippet.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package yasnippet-snippets
  :after yasnippet)
#+END_SRC
** Clojure
*** CIDER
CIDER is the Clojure(Script) Interactive Development Environment that Rocks!

CIDER extends Emacs with support for interactive programming in
Clojure. The features are centered around cider-mode, an Emacs
minor-mode that complements clojure-mode. While clojure-mode supports
editing Clojure source files, cider-mode adds support for interacting
with a running Clojure process for compilation, debugging, definition
and documentation lookup, running tests and so on.
#+BEGIN_SRC emacs-lisp
(use-package cider
:init 
(setq cider-repl-pop-to-buffer-on-connect nil))
#+END_SRC 
**** Dependencies
CIDER needs nREPL so this needs to be put in =~/.lein/profiles.clj=:
#+BEGIN_SRC clojure
{:repl {:plugins [[cider/cider-nrepl "0.21.1"]]}}
#+END_SRC
To check if it is working run ==lein repl==.
**** Refactoring
clj-refactor adds refactorings and features like /"Find usage"/ to
clojure mode and CIDER.
#+BEGIN_SRC emacs-lisp 
(use-package clj-refactor 
  :hook (clojure-mode . (lambda clj-refactor-mode 1))
  :init (cljr-add-keybindings-with-prefix "C-c C-r"))
#+END_SRC
***** Dependencies
As of version 2.0.0 clj-refactor also needs a plugin in =~/.lein/profiles.clj=:
#+BEGIN_SRC clojure
{:repl {:plugins [[cider/cider-nrepl "0.21.1"]]}}
#+END_SRC

** Structural editing
#+BEGIN_SRC emacs-lisp 
(use-package paredit
  :hook ((emacs-lisp-mode . paredit-mode)
         (clojure-mode . paredit-mode)))
#+END_SRC

* misc
** Browser support
Atomic chrome supports the Firefox extension [[https://addons.mozilla.org/de/firefox/addon/ghosttext/][Ghost Text]] and the Chrome
extension [[https://chrome.google.com/webstore/detail/atomic-chrome/][Atomic Chrome]] which let you edit textareas in your browser
with your favorite editor.
#+BEGIN_SRC emacs-lisp
(use-package atomic-chrome
  :config
  ;; Handle if there is an Emacs instance running which has the server already
  ;; started
  (ignore-errors
    (atomic-chrome-start-server))
  (setq atomic-chrome-buffer-open-style 'frame))
#+END_SRC
** Custom-File
Keep the configuration clean aka no customization.
#+BEGIN_SRC emacs-lisp
(setq custom-file "/dev/null")
#+END_SRC
